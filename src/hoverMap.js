// Do not edit: autogenerated during package phase

const hoverMap = new Map();

hoverMap.set('abs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>abs</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Calculates the absolute value of x
`
);

hoverMap.set('acos', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>acos</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Calculates the acos(x) (if defined USE_ANGLE_FUNC)
`
);

hoverMap.set('acp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>acp</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>dst src</span>) 

Copy array, if src is numeric variable or constant array dst is filled with this value
`
);

hoverMap.set('adc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>adc</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fac (pin)</span>) 

Get adc value  

On ESP32 can select pin  
fac is number of averaged samples (power of 2: 0..7)
`
);

hoverMap.set('af', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>af</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>array index</span>) 

Converts 4 bytes of an array at index <span style='color:var(--vscode-symbolIcon-variableForeground);'>index </span>to float number
`
);

hoverMap.set('as', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>as</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>array</span>) 

Sort array
`
);

hoverMap.set('asc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>asc</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>svar</span>) 

Gets the binary value of 1. char of a string
`
);

hoverMap.set('beep', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>beep</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>f l</span>) 

(ESP32) beeps with a passive piezo beeper.  
beep(-f 0) attaches PIN f to the beeper  
beep(f l) starts a sound with frequency f (Hz) and len l (ms).  

f=0 stops the sound.
`
);

hoverMap.set('block-b', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>b</span> 

Executed on button state change

<span style='color:var(--vscode-symbolIcon-variableForeground);'>bt[x]</span>  
Read button state (x = 1.. MAX_KEYS)

**Example** 
\`\`\` 
>D
tmp=0
>b
tmp=bt[1]
if tmp==0  
then  
print falling edge of button1  
endif  
if tmp==1  
then  
print rising edge of button1  
endif
\`\`\`
`
);

hoverMap.set('block-capital-b', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>B</span> 

Executed on BOOT time before sensors are initialized and on save script`
);

hoverMap.set('block-capital-bs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>BS</span> 

Executed on BOOT time after sensors are initialized`
);

hoverMap.set('block-capital-c', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>C</span> 

HTML messages arrive here (on web user io event, (if defined USE_HTML_CALLBACK))`
);

hoverMap.set('block-capital-d', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>D ssize</span> 

ssize = optional max string size  
(default=19, max=48 unless increased with #define SCRIPT_MAXSSIZE)

Define and init variables here, must be the first section, no other code allowed.

<span style='color:var(--vscode-symbolIcon-variableForeground);'>p:vname</span>
specifies permanent variables.  
The number of permanent variables is limited by Tasmota rules space (50 bytes).  
Numeric variables are 4 bytes; string variables are one byte longer than the length of string.  
p vars are stored sequentially in the order of defintion. Therefore when specifing permanent variables, add newly defined ones always at the end of already defined p vars. otherwise variables are mixed up and string variables may even be destroyed.  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>t:vname</span>
specifies countdown timers, if >0 they are decremented in seconds until zero is reached.  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>i:vname</span>
specifies auto increment counters if = 0 (in seconds)

<span style='color:var(--vscode-symbolIcon-variableForeground);'>g:vname</span>
specifies global variable which is linked to all global variables with the same definition on all devices in the homenet.  
When a variable is updated in one device it is instantly updated in all other devices.  
If a section <span style='color:var(--vscode-symbolIcon-methodForeground);'>>G</span>  exists it is executed when a variable is updated from another device (this is done via UDP-multicast, so not always reliable) the global variable receiver may be reset by cmd gvr.

<span style='color:var(--vscode-symbolIcon-variableForeground);'>I:vname</span>
specifies an integer 32 bit variable instead of float. (limited support)  
Integer constants must be preceeded by '#'

<span style='color:var(--vscode-symbolIcon-variableForeground);'>m:vname</span>
specifies a median filter variable with 5 entries (for elimination of outliers)

<span style='color:var(--vscode-symbolIcon-variableForeground);'>M:vname</span>
specifies a moving average filter variable with 8 entries (for smoothing data, should be also used to define arrays) (max 5 filters in total m+M) optional another filter length (1..127) can be given after the definition.  
Filter vars can be accessed also in indexed mode <span style='color:var(--vscode-symbolIcon-variableForeground);'>vname[x]</span>  
(x = 1..N, x = 0 returns current array index pointer (may be set also), x = -1 returns array length, x = -2 returns array average)  
Using this filter, vars can be used as arrays, #define LARGE_ARRAYS allows for arrays up to 1000 entries  
Array may also be permanent by specifying an extra :p <span style='color:var(--vscode-symbolIcon-variableForeground);'>m:p:vname</span> defines a permanent array.  

Keep in mind however that in 1M Flash standard configurations you only have 50 bytes permanent storage which stands for a maximum of 12 numbers.  
(see list above for permanent storage in other configurations)  

Arrays may also be preset in auto increment mode  
array=X sets the value at index array[0] and increments the index by 1  
array = {x y z} sets 3 values in an array from index array[0]`
);

hoverMap.set('block-capital-e', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>E</span> 

Executed when a Tasmota MQTT <span style='color:var(--vscode-symbolIcon-variableForeground);'>RESULT</span> message is received, e.g., on POWER change.  
Also Zigbee reports to this section.`
);

hoverMap.set('block-capital-f', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>F</span> 

Executed every 100 ms`
);

hoverMap.set('block-capital-g', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>G</span> 

Global variable updated section`
);

hoverMap.set('block-capital-h', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>H</span> 

Alexa Hue interface (up to 32 virtual hue devices)  
[See example here](https://tasmota.github.io/docs/Scripting-Language/#hue-emulation)

<span style='color:var(--vscode-symbolIcon-variableForeground);'>device, type, onVars</span>

Remark: hue values have a range from 0-65535.  Divide by 182 to assign HSBcolors hue values.

<span style='color:var(--vscode-symbolIcon-variableForeground);'>device</span> = device name  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>type</span> = device type - E = extended color; S = switch  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>onVars</span> = assign Hue "on" extended color parameters for hue, saturation, brightness, and color temperature (hue,sat,bri,ct) to scripter variables

**Example** 
\`\`\` 
lamp1,E,on=pwr1,hue=hue1,sat=sat1,bri=bri1,ct=ct1
\`\`\``
);

hoverMap.set('block-capital-j', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>J</span> 

The lines in this section are published via MQTT in a JSON payload on <span style='color:var(--vscode-symbolIcon-variableForeground);'>TelePeriod</span>.  

Requires compiling with <span style='color:var(--vscode-symbolIcon-variableForeground);'>#define USE_SCRIPT_JSON_EXPORT</span>.

`
);

hoverMap.set('block-capital-m', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>M</span> 

See [Smart Meter Interface](https://tasmota.github.io/docs/Smart-Meter-Interface/) docs.

If a variable does not exist, ??? is displayed for commands

If a Tasmota <span style='color:var(--vscode-symbolIcon-variableForeground);'>SENSOR</span> or <span style='color:var(--vscode-symbolIcon-variableForeground);'>STATUS</span> or <span style='color:var(--vscode-symbolIcon-variableForeground);'>RESULT</span> message is not generated or a <span style='color:var(--vscode-symbolIcon-variableForeground);'>Var</span> does not exist the destination variable is NOT updated.
`
);

hoverMap.set('block-capital-p', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>P</span> 

Any power change triggers here (if defined SCRIPT_POWER_SECTION)`
);

hoverMap.set('block-capital-r', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>R</span> 

Executed on restart.  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>p: vars</span> are saved automatically after this call`
);

hoverMap.set('block-capital-s', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>S</span> 

Executed every second`
);

hoverMap.set('block-capital-t', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>T</span> 

Executed at least at <span style='color:var(--vscode-symbolIcon-variableForeground);'>TelePeriod</span> time (SENSOR and STATE) but mostly faster up to every 100 ms  
Only put tele- vars in this section.

Remark: JSON variable names (like all others) may not contain math operators like -  
You should set <span style='color:var(--vscode-symbolIcon-variableForeground);'>SetOption64 1</span> to replace - (dash) with _ (underscore).  
Zigbee sensors will not report to this section, use E instead.`
);

hoverMap.set('block-capital-u', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>U</span> 

JSON messages from cmd status arrive here`
);

hoverMap.set('block-capital-w', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>W</span> 

The lines in this section are displayed in the web UI main page.  
Requires compiling with <span style='color:var(--vscode-symbolIcon-variableForeground);'>#define USE_SCRIPT_WEB_DISPLAY</span>  

You may put any html code here.
- Variables may be substituted using %var%
- HTML statements are displayed in the sensor section of the main page
- HTML statements preceded with a @ are displayed at the top of the page
- HTML statements preceded with a $ are displayed in the main section
- USER IO elements are displayed at the top of the page


For next loops are supported to repeat HTML code (precede with % char) <span style='color:var(--vscode-symbolIcon-variableForeground);'>%for var from to inc %next</span> 

This method is preferred: script subroutines may be called <span style='color:var(--vscode-symbolIcon-variableForeground);'>sub=name of subroutine</span>, like normal subroutines %=#sub in this subroutine a web line may be sent by <span style='color:var(--vscode-symbolIcon-variableForeground);'>wcs</span>  (see below) thus allowing dynamic HTML pages.

<span style='color:var(--vscode-symbolIcon-variableForeground);'>=#sub(x)</span> in any position of webline calls subroutine.  
This allows inserting content.

<span style='color:var(--vscode-symbolIcon-variableForeground);'>insa(array)</span> in any position insert all elements from an array comma separated.

<span style='color:var(--vscode-symbolIcon-variableForeground);'>%/file</span>  calls a file from the file system and send its content to browser.  
In this file any cmds may apply.`
);

hoverMap.set('block-capital-wm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>WM</span> 

TML statements are displayed in the main section of the main page`
);

hoverMap.set('block-capital-ws', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>WS</span> 

HTML statements are displayed in the sensor section of the main page
`
);

hoverMap.set('block-h', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>h passcode</span> 

Siri Homekit interface (up to 16 virtual Homekit devices)

passcode = 111-11-111 keep this format, numbers 0-9

<span style='color:var(--vscode-symbolIcon-variableForeground);'>device</span>
name,type,opt,var1,var2...

<span style='color:var(--vscode-symbolIcon-variableForeground);'>name</span> = device name (max 23 characters)  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>type</span> = device type (HAP_CID)
- 7 = outlet, on/off
- 5 = light, on/off,hue,sat,bri
- 10 = sensor

<span style='color:var(--vscode-symbolIcon-variableForeground);'>opt</span> = sensor type
- 0 = Temperature,val
- 1 = Humidity,val
- 2 = Light level,val
- 3 = Battery status,level,low battery,charging
- 4 = Ambient light level with extended range -10000,+10000
- 5 = Contact Sensor (switch)

<span style='color:var(--vscode-symbolIcon-variableForeground);'>var1 ...</span> = variable name (max 11 characters) the variables denote scripting variables that need to be set by script
the special variables  
@px x (1..9) directly set, read power states e.g. relays  
@sx x (1..9) directly read switch state  
@bx x (1..9) directly read button state

**Example** 
\`\`\` 
>h 111-11-111
outlet,7,0,@p1 lamp1,5,0,pwr,hue,sat,bri
temperature,10,0,tval
\`\`\`

A restart is required after modification of descriptor!  
By faulty parameters the homekit dataset may get corrupted  
To reset the homekit dataset completely type in console script>hki(89)

Compilation: needs to add in linker to build_flags  
-DUSE_HOMEKIT  
lib_extra_dirs  
lib/libesp32_div`
);

hoverMap.set('block-jp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>jp</span> 

HTTPS webpage json parse arrives here`
);

hoverMap.set('block-ti1', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti1</span>   
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti2</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti3</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti4</span>  

Ticker callback after timer expiration`
);

hoverMap.set('block-ti2', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti1</span>   
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti2</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti3</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti4</span>  

Ticker callback after timer expiration`
);

hoverMap.set('block-ti3', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti1</span>   
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti2</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti3</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti4</span>  

Ticker callback after timer expiration`
);

hoverMap.set('block-ti4', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti1</span>   
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti2</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti3</span>  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>>ti4</span>  

Ticker callback after timer expiration`
);

hoverMap.set('block-w', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>>w ButtonLabel</span> 

gGenerates a button with the name *"ButtonLabel"* in Tasmota main menu.  
Clicking this button displays a web page with the HTML data of this section.  
All cmds like in >W apply here.  
These lines are refreshed frequently to show e.g. sensor values.  
Lines preceded by \$ are static and not refreshed and displayed below lines without $.  
This option also enables a full webserver interface when USE_UFILESYS is active.  
You may display files from the flash or SD filesystem by specifying the url: IP/ufs/path .  
(supported files: *.jpg, *.html, *.txt)

<span style='color:var(--vscode-symbolIcon-methodForeground);'>>w1 >w2 >w3 >w4 >w5 >w6</span>  same as above <span style='color:var(--vscode-symbolIcon-methodForeground);'>>w</span>  

Requires compiling with #define SCRIPT_FULL_WEBPAGE.`
);

hoverMap.set('boot', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>boot</span> 

True on BOOT

The variable is cleared after reading true`
);

hoverMap.set('break', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>break</span> 

Exits a section or terminates a for next loop
`
);

hoverMap.set('bt', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>bt</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

Button state (x = 1..N) 

Only valid in section b  
If defined USE_BUTTON_EVENT
`
);

hoverMap.set('bu', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>bu</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn txt1 txt2</span>)  

Creates a *Button control*

<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of variable to hold button state  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt1</span> = text of ON state of button   
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt2</span> = text of OFF state of button

Up to 4 buttons may be defined in one row  `
);

hoverMap.set('c2ps', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>c2ps</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>sel val</span>) 

Gets, sets values on ESP32 CORE2 
- sel=0 green led
- sel=1 vibration motor
- sel=2,3,4 get touch button state 1,2,3 

(if defined USE_M5STACK_CORE2)
`
);

hoverMap.set('case', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>Switch selector</span> 

\`\`\`
switch var 
  case a  
    <code block>
  case b  
    <code block>
ends  
\`\`\`


*var* can be numeric or string
`
);

hoverMap.set('cbs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>cbs</span>  

Command text buffer size for tasmota cmds  
Default is 256   
May also be set 
`
);

hoverMap.set('ceil', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ceil</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Gets the integer + 1 part of x
`
);

hoverMap.set('chg', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>chg</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>var</span>] 

True if a variables value was changed   
(numeric vars only)

The variable is cleared after reading true`
);

hoverMap.set('ck', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ck</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn txt (xs)</span>)  

Creates a *Checkbox control*  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of variable to hold checkbox state  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt</span> = label text  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>xs</span> = optional xs (default 200)`
);

hoverMap.set('core', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>core</span> 

Current core (0 or 1) (ESP32)

System variables for debugging purposes`
);

hoverMap.set('cos', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>cos</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Calculates the cosinus(x)

If defined USE_ANGLE_FUNC

`
);

hoverMap.set('ct', 
`res =<span style='color:var(--vscode-symbolIcon-methodForeground);'>ct</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>num timer core (prio) (stack)</span>) 


Creates a task num (1 or 2) with optional priority and stack size which is executed every timer (ms) time on core 0 or 1

The sections are named
\`\`\`
>t1 for task 1
>t2 for task 2
\`\`\`
Requires #define USE_SCRIPT_TASK 

**Example**

\`\`\`
>D
>B
; create task 1 every 1000 ms on core 0
ct(1 1000 0)
; create task 2 every 3000 ms on core 1
ct(2 3000 1)

>t1
print task1 on core %core%

>t2
print task2 on core %core%
\`\`\``
);

hoverMap.set('cts', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>cts</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>tstamp flg</span>) 

Convert timestamp to German locale format back and forth 

- flg = 0 to webformat
- flg = 1 to German format

Requires #define USE_FEXTRACT`
);

hoverMap.set('day', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>day</span> 

day of month
`
);

hoverMap.set('delay', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>delay</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Pauses x milliseconds (should be as short as possible)
`
);

hoverMap.set('diff', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>diff</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>var</span>]

Difference since last variable update

The variable is cleared after reading true`
);

hoverMap.set('dp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>dp</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x y</span>) 

Sets preceding digits to x and decimal precision to y, the delimiter if space sets decimal point character to ., a comma sets the point o comma
`
);

hoverMap.set('dpx', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>dpx</span> 

Sets decimal precision to x (0-9)
`
);

hoverMap.set('dpx.y', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>dpx.y</span> 

Sets preceding digits to x and decimal precision to y (0-9), the delimiter also sets the decimal point character to . or ,
`
);

hoverMap.set('dt', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>dt</span> 

Display text command  

(if #define USE_DISPLAY)
`
);

hoverMap.set('dvnm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>dvnm</span>  

Device name
`
);

hoverMap.set('else', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>Conditional Statements</span> 

There are two syntax alternatives. You may NOT mix both formats.

\`\`\`
if a==b  
and x==y  
or k==i 
then <do this>
else <do that>  
endif  
\`\`\`

or

\`\`\`
if a==b  
and x==y  
or k==i {  
  <do this> 
} else {  
  <do that>    
}
\`\`\`

Remarks:  
The last closing bracket must be on a separate line.

Calculations are permitted in conditional expressions, e.g.  
\`if var1-var2==var3*var4\`

Conditional expressions may be enclosed in parentheses.  
The statement must be on a single line. e.g.,  
\`if ((a==b) and ((c==d) or (c==e)) and (s!="x"))\``
);

hoverMap.set('endif', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>Conditional Statements</span> 

There are two syntax alternatives. You may NOT mix both formats.

\`\`\`
if a==b  
and x==y  
or k==i 
then <do this>
else <do that>  
endif  
\`\`\`

or

\`\`\`
if a==b  
and x==y  
or k==i {  
  <do this> 
} else {  
  <do that>    
}
\`\`\`

Remarks:  
The last closing bracket must be on a separate line.

Calculations are permitted in conditional expressions, e.g.  
\`if var1-var2==var3*var4\`

Conditional expressions may be enclosed in parentheses.  
The statement must be on a single line. e.g.,  
\`if ((a==b) and ((c==d) or (c==e)) and (s!="x"))\``
);

hoverMap.set('ends', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>Switch selector</span> 

\`\`\`
switch var 
  case a  
    <code block>
  case b  
    <code block>
ends  
\`\`\`


*var* can be numeric or string
`
);

hoverMap.set('enrg', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>enrg</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>n</span>] 

Get value of energy register n 
- 0 = total
- 1..3 voltage of phase 1..3
- 4..6 current of phase 1..3
- 7..9 power of phase 1..3
- 10=start energy
- 11=daily energy
- 12=energy yesterday 

(if defined USE_ENERGY_SENSOR)
`
);

hoverMap.set('epoch', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>epoch</span> 

epoch time (from 2019-1-1 00:00:00)
`
);

hoverMap.set('epoffs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>epoffs</span> 

set epoch offset

Must be no longer then 2 years to fit into single float with second precision
`
);

hoverMap.set('eres', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>eres</span> 

result of >E section 

set this var to 1 in section >E to tell Tasmota event is handled  
(prevents MQTT)
`
);

hoverMap.set('f', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>f</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Convert integer x to float
`
);

hoverMap.set('fa', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fa</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr</span>) 

Returns number of available bytes in open file stream
`
);

hoverMap.set('fc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fc</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr</span>) 

Close file
`
);

hoverMap.set('fcs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fcs</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr del index ec</span>) 

Bets non string from file: 
- del = delimiter char or string
- index = n´th element, 
- ec = end character delimiter.
`
);

hoverMap.set('fd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fd</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) 

Delete file fname
`
);

hoverMap.set('fe', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fe</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) 

Execute script fname (max 2048 bytes, script must start with the '>' character on the first line)

Requires #define USE_SCRIPT_FATFS_EXT`
);

hoverMap.set('ff', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ff</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr</span>) 

Flush file, writes cached data and updates directory
`
);

hoverMap.set('fl1', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>flx</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) 

Create download link for file (x=1 or 2)  
fname = file name of file to download
`
);

hoverMap.set('fl2', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>flx</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) 

Create download link for file (x=1 or 2)  
fname = file name of file to download
`
);

hoverMap.set('floor', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>floor</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Gets the integer part of x
`
);

hoverMap.set('flx', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>flx</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) 

Create download link for file  
(x=1 or 2)  
fname = file name of file to download
`
);

hoverMap.set('fmd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fmd</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) 

Make directory fname

Requires #define USE_SCRIPT_FATFS_EXT`
);

hoverMap.set('fo', 
`fr = <span style='color:var(--vscode-symbolIcon-methodForeground);'>fo</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname m</span>) 

Open file fname.

Mode;
- 0 = read
- 1 = write
- 2 = append 

Returns file reference (0-3) or -1 for error 

Alternatively m may be:
- r = read
- w = write
- a = append 

For files on SD card, filename must be preceded with / e.g.   
fr=fo("/fname.txt" 0)
`
);

hoverMap.set('for', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>For loop</span> 

\`\`\`
for var <from> <to> <inc>  
  <code block>
next  
\`\`\`

Loop count must not be less than 1.

No direct nesting supported.

*var* must be declared in *>D* section
`
);

hoverMap.set('fr', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>res</span> = fr(<span style='color:var(--vscode-symbolIcon-variableForeground);'>svar fr</span>) 

Reads a string into svar, returns bytes read.   
 String is read until delimiter (\t, \n, \r) or eof
`
);

hoverMap.set('fra', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fra</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>array fr</span>) 

Reads array from open file with fr (assumes tab delimited entries)

Requires #define USE_SCRIPT_FATFS_EXT`
);

hoverMap.set('frb', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>frb</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr</span>) 

Read byte from file
`
);

hoverMap.set('frd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>frd</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) = remove directory fname

Requires #define USE_SCRIPT_FATFS_EXT`
);

hoverMap.set('freq', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>freq</span>

Cpu frequency

System variables for debugging purposes`
);

hoverMap.set('frn', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>frn</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>spath dpath</span>) 

Rename a file
`
);

hoverMap.set('frnm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>frnm</span>  

Friendly name
`
);

hoverMap.set('frw', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>frw</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr url</span>) 

Read file from web url

If url is an immediate string it may be longer than max string size to support very long URLs
`
);

hoverMap.set('fs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fs</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr pos</span>) 

Seek to file position pos
`
);

hoverMap.set('fsi', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>res</span> = fsi(<span style='color:var(--vscode-symbolIcon-variableForeground);'>sel</span>)

Gets file system information
- sel = 0 returns total media size
- sel = 1 returns free space both in kB
`
);

hoverMap.set('fsm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fsm</span> 

Return 1 if filesystem is mounted, valid SD card found
`
);

hoverMap.set('fw', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fw</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>text fr</span>) 

Writes text to (the end of) file fr  
Returns number of bytes written
`
);

hoverMap.set('fwa', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fwa</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>array fr (a)</span>) 

Writes array to open file with fr  
Writes tab delimited entries and line feed at end.

The optional a parameter omits the linefeed for appending arrays

Requires #define USE_SCRIPT_FATFS_EXT`
);

hoverMap.set('fwb', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fwb</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>byte fr</span>) 

Vrite byte to file
`
);

hoverMap.set('fwp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fwp</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>pnum fr</span>) 

Write picture from RAM buffer number pnum to SD card file with file reference fr
`
);

hoverMap.set('fx', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fx</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname</span>) = check if file fname exists

Requires #define USE_SCRIPT_FATFS_EXT`
);

hoverMap.set('fxt', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fxt</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr ts_from ts_to col_offs accum array1 array2 ... arrayn</span>) 

Read arrays from csv file from timestamp to timestamp with column offset and accumulate values into arrays1 .. N

Assumes csv file with timestamp in 1. 

Column and data values in columns 2 to n.

Requires #define USE_FEXTRACT`
);

hoverMap.set('fxto', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fxto</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr ts_from ts_to col_offs accum array1 array2 ... arrayn</span>) 

Same as <span style='color:var(--vscode-symbolIcon-methodForeground);'>fxt</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr ts_from ts_to col_offs accum array1 array2 ... arrayn</span>)  with time optimized access.

Read arrays from csv file from timestamp to timestamp with column offset and accumulate values into arrays1 .. N

Assumes csv file with timestamp in 1. 

Column and data values in columns 2 to n.

Requires #define USE_FEXTRACT`
);

hoverMap.set('fz', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>fz</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fr</span>) 

Returns file size
`
);

hoverMap.set('gc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>gc</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>T (size) array1 ... array4 "name" "label1" ... "label4" "entrylabels" "header" {"maxy1"} {"maxy2"}</span>)

Creates a *Graph control*

<span style='color:var(--vscode-symbolIcon-variableForeground);'>T</span> = type  
- b=barchart
- c=columnchart
- cs=columnchart stacked - C=combochart
- p=piechart
- l=linechart up to 4 lines with same scaling
- l2=linechart with exactly 2 lines and 2 y scales (must be given at end)
- lf2 like above but with splined lines
- h=histogram
- t=data table
- g=simple gauges (must give extra 3 vars after header, yellow start, red start, maxval)
- T=Timeline (special type arrays contains start,stop pairs in minutes timeofday)

b,l,h type may have the '2' option to specify exactly 2 arrays with 2 y scales given at the end of parameter list  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>size</span> = optional size, allows to use only part of an array, must be lower then array size  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>array</span> = up to 4 arrays of data  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>name</span> = name of chart  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>label</span> = label for up to the 4 datasets in chart  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>entrylabel</span> = labels of each x axis entry separated by '|' char  
- ("cntN" starts numbering entries with the number N an optional /X generates numbers divided by X. Produce labels that cycle through the array indexes, starting with the number N. For instance, "cnt6" with an array of length 8 will produce the labels 6|7|0|1|2|3|4|5| Using "cntN/X" will then divide the numeric value of the label, so "cnt6/2" with an array of length 8 will produce the labels 3|3|0|0|1|1|2|2|)  
- ("wdh: before a week definition generates a week with full hours)

<span style='color:var(--vscode-symbolIcon-variableForeground);'>header</span> = visible header name of chart  

The curve displayed in google chart starts at array index (array[0]) so array index must be set also. thus the displayed curve may be shifted to the desired position by adjusting the array index.

Additionally you have to define the html frame to put the chart in (both lines must be preceded by a $ char) e.g.

\`\`\`
$<div id="chart1"style="width:640px;height:480px;margin:0 auto"></div>
$gc(c array1 array2 "wr" "pwr1" "pwr2" "mo|di|mi|do|fr|sa|so" "Solar feed")
\`\`\`

You may define more then one chart.  
The charts id is chart1 ... chartN

## Very customized chart definition

Define a chart like above, but add a *t* to the definition
this generates a google table from the arrays e.g.:  

\`\`\`
&gc(l*t* array1 array2 "wr" "pwr1" "pwr2" "mo|di|mi|do|fr|sa|so")
\`\`\`

Then define the options for the graph as from the doku of google e.g.:

\`\`\`
$var options = {
$vAxes:{0:{maxValue:40,title:'Außentemperatur'},1:{maxValue:60,title:'Solarspeicher'}},
$series:{0:{targetAxisIndex:0},1:{targetAxisIndex:1}},
$hAxis: {title: 'Wochenverlauf'},
$};
\`\`\`

Then gc(e) closes the definition

\`\`\`
$gc(e)
\`\`\`


`
);

hoverMap.set('ghum', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ghum</span>  

Global humidity
`
);

hoverMap.set('gjp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>gjp</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>host path</span>) 

Trigger HTTPS JSON page read as used by Tesla Powerwall 

(if defined SCRIPT_GET_HTTPS_JP)
`
);

hoverMap.set('gprs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>gprs</span>  

Global pressure
`
);

hoverMap.set('gtmp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>gtmp</span>  

Global temperature
`
);

hoverMap.set('gtopic', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>gtopic</span>  

mqtt group topic
`
);

hoverMap.set('gwr', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>gwr</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>del index ec</span>) 

Gets non JSON element from webresponse 

del = delimiter char or string  
index = n´th element  
ec = optional end character delimiter

(if defined USE_WEBSEND_RESPONSE)
`
);

hoverMap.set('hd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hd</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>"hstr"</span>) 

Converts hex number string to a decimal number
`
);

hoverMap.set('heap', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>heap</span> 

Free heap size

System variables for debugging purposes`
);

hoverMap.set('hf', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hf</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>"hstr"</span>) 

Converts hex float number string to a decimal number

<span style='color:var(--vscode-symbolIcon-methodForeground);'>hf</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>"hstr"</span> <span style='color:var(--vscode-symbolIcon-variableForeground);'>r</span>) 

Converts hex float number string (reverse byte order) to a decimal number
`
);

hoverMap.set('hn', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hn</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Converts x (0..255) to a hex nibble string
`
);

hoverMap.set('hni', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hni</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Converts integer x (0..255) to a hex nibble string
`
);

hoverMap.set('hours', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hours</span> 

hours
`
);

hoverMap.set('hsvrgb', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hsvrgb</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>h s v</span>) 

Converts hue (0..360), saturation (0..100) and value (0..100) to RGB color
`
);

hoverMap.set('http', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>http</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>url payload</span>) 

Does a GET or POST request on a URL 

(http:// is internally added)
`
);

hoverMap.set('hx', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hx</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>)  

Converts x (0..4294967295, 32-bit) to a hex string
`
);

hoverMap.set('hxi', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>hxi</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>)  

Converts integer x (0..4294967295, 32-bit) to a hex string
`
);

hoverMap.set('i', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>i</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>)  

Convert float x to integer
`
);

hoverMap.set('ia', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ia</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>AA</span>] , <span style='color:var(--vscode-symbolIcon-methodForeground);'>ia2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>AA</span>] 

Test and set I2C device with address AA (on BUS 1 or 2), returns 1 if device is present

I2C support requires #define USE_SCRIPT_I2C`
);

hoverMap.set('ia2', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ia</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>AA</span>] , <span style='color:var(--vscode-symbolIcon-methodForeground);'>ia2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>AA</span>] 

Test and set I2C device with address AA (on BUS 1 or 2), returns 1 if device is present

I2C support requires #define USE_SCRIPT_I2C`
);

hoverMap.set('if', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>Conditional Statements</span> 

There are two syntax alternatives. You may NOT mix both formats.

\`\`\`
if a==b  
and x==y  
or k==i 
then <do this>
else <do that>  
endif  
\`\`\`

or

\`\`\`
if a==b  
and x==y  
or k==i {  
  <do this> 
} else {  
  <do that>    
}
\`\`\`

Remarks:  
The last closing bracket must be on a separate line.

Calculations are permitted in conditional expressions, e.g.  
\`if var1-var2==var3*var4\`

Conditional expressions may be enclosed in parentheses.  
The statement must be on a single line. e.g.,  
\`if ((a==b) and ((c==d) or (c==e)) and (s!="x"))\``
);

hoverMap.set('ins', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ins</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>s1 s2</span>)  

Check if string s2 is contained in string s1  

Returns -1 if not contained or the position of the contained string
`
);

hoverMap.set('int', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>int</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Gets the integer part of x (like floor)
`
);

hoverMap.set('ir', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ir</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>]  

Read 1..3 bytes from register aa

I2C support requires #define USE_SCRIPT_I2C`
);

hoverMap.set('ir1', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ir</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>]  

Read 1..3 bytes from register aa

I2C support requires #define USE_SCRIPT_I2C`
);

hoverMap.set('ir2', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ir</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>]  

Read 1..3 bytes from register aa

I2C support requires #define USE_SCRIPT_I2C`
);

hoverMap.set('ir3', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ir</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>ir3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa</span>]  

Read 1..3 bytes from register aa

I2C support requires #define USE_SCRIPT_I2C`
);

hoverMap.set('is', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>is</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>num "string1|string2|....|stringn|"</span>)  

Defines a string array optionally preset with immediate strings separated by '|' (this immediate string may be up to 255 chars long) num = 0 read only string array, num > 0 number of elements in read write string array

<span style='color:var(--vscode-symbolIcon-methodForeground);'>is</span>[<span style='color:var(--vscode-symbolIcon-variableForeground);'>index</span>]  

Gets string index from string array, if read-write also write string of index

<span style='color:var(--vscode-symbolIcon-methodForeground);'>is1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>is2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>]  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>is1</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>), <span style='color:var(--vscode-symbolIcon-methodForeground);'>is2</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

String array see above
`
);

hoverMap.set('iw', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>],
<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>]  

Write val to register aa (1..3 bytes)  

If in aa bit 15 is set no, destination register is transfered (needed for some devices)  
If bit 14 is set byte order is reversed

I2C support requires #define USE_SCRIPT_I2C
`
);

hoverMap.set('iw1', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>],
<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>]  

Write val to register aa (1..3 bytes)  

If in aa bit 15 is set no, destination register is transfered (needed for some devices)  
If bit 14 is set byte order is reversed

I2C support requires #define USE_SCRIPT_I2C
`
);

hoverMap.set('iw2', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>],
<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>]  

Write val to register aa (1..3 bytes)  

If in aa bit 15 is set no, destination register is transfered (needed for some devices)  
If bit 14 is set byte order is reversed

I2C support requires #define USE_SCRIPT_I2C
`
);

hoverMap.set('iw3', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw1</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>],
<span style='color:var(--vscode-symbolIcon-methodForeground);'>iw2</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>], <span style='color:var(--vscode-symbolIcon-methodForeground);'>iw3</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>aa val</span>]  

Write val to register aa (1..3 bytes)  

If in aa bit 15 is set no, destination register is transfered (needed for some devices)  
If bit 14 is set byte order is reversed

I2C support requires #define USE_SCRIPT_I2C
`
);

hoverMap.set('knx', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>knx</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>code value</span>) 

Sends a number value to KNX
`
);

hoverMap.set('lfw', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>lfw</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>fname payload limit</span>) 

Logs a string (payload) to a file (fname) with size limit (limit)  
Payload is added to end of file together with a LF character.  
If file size is exceeded, the first line of file is removed.

Requires #define USE_SCRIPT_FATFS_EXT`
);

hoverMap.set('lip', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>lip</span>  

Local ip as string
`
);

hoverMap.set('loglvl', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>loglvl</span> 

Loglevel of script cmds (may be set also)

System variables for debugging purposes`
);

hoverMap.set('luip', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>luip</span>  

udp ip as string  

From updating device when USE_SCRIPT_GLOBVARS defined
`
);

hoverMap.set('lvgl', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>lvgl</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>sel ...</span>) 

General lvgl call.  
Each object gets a concurrent number 1 ... N with which you can reference the object 

- sel = 0 => initialize LVGL with current display - sel = 1 => clear screen
- sel = 2 xp yp xs ys text => create a button. the button press is reported in section >lvb
- sel = 3 xp yp xs ys => create a slider. the slider move is reported in section >lvs
- sel = 4 xp yp xs ys min max => create a gauge.
- set = 5 objnr value => set gauge value.
- sel = 6 xp yp xs ys text => create a label.
- sel = 7 objnr text => set label text
- sel = 8 create a keyboard, just get a look and feel
- sel = 50 => get obj nr from caller in callback >lvb or >lvs
- sel = 51 => get event nr from caller in callback >lvb or >lvs
- sel = 52 => get slider value from caller in callback >lvs

Requires #define USE_LVGL 
`
);

hoverMap.set('maca', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>maca</span>   

Current MAC Address
`
);

hoverMap.set('med', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>med</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>n x</span>)  

Calculates a 5 value median filter of x  
2 filters possible n=0,1
`
);

hoverMap.set('micros', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>micros</span> 

Running microseconds

System variables for debugging purposes`
);

hoverMap.set('millis', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>millis</span> 

Running milliseconds

System variables for debugging purposes`
);

hoverMap.set('mins', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>mins</span> 

mins
`
);

hoverMap.set('month', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>month</span>  

month
`
);

hoverMap.set('mp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>mp</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x cond1 result1 cond2 result2 ... cond;&lt;n&gt; result&lt;n&gt;</span>) 

It addresses a standard task with less code and much flexibility: mapping an arbitrary incoming numeric value into the allowed range.   
The numeric value x (float only - no integer I:) passed as the first parameter is followed by parameter pairs which can be repeated.  
A parameter pair consists of condition and result.  
So input value x is compared to the conditions in the order they are provided as subsequent parameters.  
If the value matches the condition, the associated result is returned as function. Subsequent rules are skipped.  
If x matches none of the conditions, x is returned unchanged as result.


Conditions consist of one of the comparison operators "<", ">", "=" followed by a numeric value/variable.  
Be noted that 2-char-operators like ">=" are not allowed.  
Results consist of a numeric value/variable.

\`\`\`
Example 1: y=mp(x <8 0)
This mapping reads: If x is less than 8 return 0, otherwise return x
                                                          
Example 2: y=mp(x >100 100)
This mapping reads: If x is greater than 100 return 100, otherwise x.

Example 3: y=mp(x <8 0 >100 100)
This mapping reads: Assigns 0 to y if x is less than 8. Assigns 100 to y if x is greater than 100. 
Assigns x to y for all values of x that do not meet the above criteria (8 to 100).

The above code of example 3 does the same as the following code - with just one line of code and 16 characters less:

y=x
if x<8 {
  y=0
}
if x>100 {
  y=100
}
\`\`\``
);

hoverMap.set('mpt', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>mpt</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Measure pulse time  
- x>=0 defines pin to use  
- x=-1 returns low pulse time  
- x=-2 return high pulse time 

If defined USE_ANGLE_FUNC

`
);

hoverMap.set('mqttc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>mqttc</span>  

True on mqtt connect

The variable is cleared after reading true`
);

hoverMap.set('mqttd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>mqttd</span>  

True on mqtt disconnect

The variable is cleared after reading true`
);

hoverMap.set('mqtts', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>mqtts</span> 

MQTT connection status: 
- 0 = disconnected
- &gt;0 = connected
`
);

hoverMap.set('next', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>For loop</span> 

\`\`\`
for var <from> <to> <inc>  
  <code block>
next  
\`\`\`

Loop count must not be less than 1.

No direct nesting supported.

*var* must be declared in *>D* section
`
);

hoverMap.set('nm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>nm</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>min max step vn txt (xs) (prec)</span>)  

Creates a *Number Input control*

<span style='color:var(--vscode-symbolIcon-variableForeground);'>min</span> = number minimum value  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>max</span> = number maximum value  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>step</span> = number step value for up/down arrows  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of variable to hold number  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt</span> = label text  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>xs</span> = optional xs (default 200)  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>prec</span> = optional number precision (default 1)`
);

hoverMap.set('npwr', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>npwr</span>  

Number of tasmota power devices
`
);

hoverMap.set('ow', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ow</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>SEL &lt;opt PAR&gt;</span>) 

Onewire support requires #define USE_SCRIPT_ONEWIRE  

- SEL 0 = init bus with pin number N (if bit 15 ist set, select serial DS2480B, lsb = rec pin, msb = trx pin)  
- SEL 1 = reset cmd
- SEL 2 = skip cmd
- SEL 3 = write PAR
- SEL 4 = read
- SEL 5 = reset search cmd
- SEL 6 = search cmd addr index PAR
- SEL 7 = select cmd addr index PAR SEL 8 = select and set bits index PAR
- SEL 9 = select and read word index PAR bit 7 = 0 start, bit 7 = 1 read result
- SEL 10-18 = get byte (1-8) of adress from index PAR
- SEL 99 = delete bus driver



Support for onewire either directly or via serial port with onewire bus driver DS2480B`
);

hoverMap.set('pc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pc</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

Pulse counter value (x = 1..4)
`
);

hoverMap.set('pd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pd</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] = defined sensor for GPIO x.  
999 if none

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>pd</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn label (xs) txt1 txt2 ... txtn</span>)  

Creates a *Pulldown control*

<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of variable to hold selected state  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>label</span> = label text  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>xs</span> = optional xs (default 200)  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt1</span> = text of entry #1  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt2</span> = text of entry #2  

and so on`
);

hoverMap.set('pheap', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pheap</span> 

PSRAM free heap size (ESP32)

System variables for debugging purposes`
);

hoverMap.set('pin', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pin</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

GPIO pin level (x = 0..16)
`
);

hoverMap.set('pl', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pl</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>path</span>) 

Play mp3 audio from filesystem 

(if defined USE_I2S_AUDIO or USE_TTGO_WATCH or USE_M5STACK_CORE2)
`
);

hoverMap.set('pn', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pn</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

GPIO for sensor code x.  
99 if none
`
);

hoverMap.set('pow', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pow</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x y</span>) 

Calculates exponential powers x^y  
Imprecise version only
`
);

hoverMap.set('prefixn', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>prefixn</span>  

Prefix  
n = 1-3
`
);

hoverMap.set('print', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>print</span> <span style='color:var(--vscode-symbolIcon-variableForeground);'>string</span>  


Prints to the log for debugging
`
);

hoverMap.set('pwmN', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pwmN</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>val</span>) 

Outputs a pwm signal on channel N (1..N) with val (0-1023)

<span style='color:var(--vscode-symbolIcon-methodForeground);'>pwmN</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>-pin freq</span>) 

Defines a pwm channel N (1..N) with pin Nr and frequency 
(pin 0 being -64, N=5 with esp8266 and N=8 with esp32)`
);

hoverMap.set('pwr', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>pwr</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

Power state (x = 1..N)
`
);

hoverMap.set('ram', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ram</span> 

Used ram size

System variables for debugging purposes`
);

hoverMap.set('rapp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>rapp</span> 

Append this line to MQTT (ResponseAppend)
`
);

hoverMap.set('rb', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>rb</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn label (xs) txt1 txt2 ... txtn)</span>)  

Creates a *Radio button control*

<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of variable to hold selected state  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt</span> = label text  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>xs</span> = optional xs (default 200)  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt1</span> = text of entry #1  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>txt2</span> = text of entry #2  

and so on

`
);

hoverMap.set('rec', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>rec</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>path seconds</span>) 

Rec n seconds wav audio file from i2s microphone to filesystem path 

(if defined USE_I2S_AUDIO or USE_M5STACK_CORE2)
`
);

hoverMap.set('rnd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>rnd</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Return a random number between 0 and x

Sseed may be set by rnd(-x)
`
);

hoverMap.set('round', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>round</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Round to nearest integer x
`
);

hoverMap.set('rr', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>rr</span> () 

Returns the reset reason of last restart (as string)
`
);

hoverMap.set('s', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>s</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Explicit conversion from number x to string  

May be preceded by precision digits  
e.g. s(2.2x) = use 2 digits before and after decimal point
`
);

hoverMap.set('s2hms', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>s2hms</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>S</span>) 

Converts seconds to HH:MM:SS string
`
);

hoverMap.set('s2t', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>s2t</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>seconds</span>) 

Convert seconds to Tasmota timestamp

Requires #define USE_FEXTRACT`
);

hoverMap.set('sa', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sa</span> () 

Returns number of bytes available on port

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('sas', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sas</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>index</span>) 

Sort string array (is, is1, is2, index = 1,2,3)
`
);

hoverMap.set('say', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>say</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>text</span>) 

Plays specified text to speech 

(if defined USE_I2S_AUDIO or USE_TTGO_WATCH or USE_M5STACK_CORE2)
`
);

hoverMap.set('sb', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sb</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>svar p n</span>) 

Gets a substring from svar at position p and length n  

If p<0 counts from end
`
);

hoverMap.set('sc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sc</span> ()

Close serial port

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('secs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>secs</span> 

seconds
`
);

hoverMap.set('sendmail', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sendmail</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>server:port:user:passwd:from:to:subject</span>] msg  

The following parameters can be specified during compilation via #define directives in user_config_override.h:
* EMAIL_SERVER
* EMAIL_PORT
* EMAIL_USER
* EMAIL_PASSWORD
* EMAIL_FROM

To use any of these values, pass an * as its corresponding argument placeholder.

Example
\`\`\`
sendmail [*:*:*:*:*:<rec@gmail.com>:theSubject] theMessage
\`\`\`
Instead of passing the msg as a string constant, the body of the e-mail message may also be composed using the script m (note lower case) section. 

The specified text in this script section must end with a # character.

sendmail will use the m section if * is passed as the msg parameter. 

In this >m section you may also specify email attachments.   
@/filename specifies a file to be attached (if file system is present)  
&arrayname specifies an array attachment (as tab delimited text, no file system needed)
$N attach a webcam picture from rambuffer number N (usually 1)  

Requires #define USE_SENDMAIL  

Enabling this feature also enables Tasmota TLS as sendmail uses SSL.`
);

hoverMap.set('sf', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sf</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>F</span>) 

Sets the CPU Frequency (ESP32) to 80,160,240 Mhz, returns current Freq.
`
);

hoverMap.set('sht', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sht</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

Shutter position (x = 1..N)

If defined USE_SHUTTER
`
);

hoverMap.set('sin', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sin</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Calculates the sinus(x)

If defined USE_ANGLE_FUNC
`
);

hoverMap.set('sl', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sl</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>svar</span>) 

Gets the length of a string

--- 

<span style='color:var(--vscode-symbolIcon-methodForeground);'>sl</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>min max vn ltxt mtxt rtxt)</span>)  

Creates a *Slider control*  

<span style='color:var(--vscode-symbolIcon-variableForeground);'>min</span> = slider minimum value  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>max</span> = slider maximum value  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of variable to hold slider value  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>ltxt</span> = label left of slider  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>mtxt</span> = label middle of slider  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>rtxt</span> = label right of slider  `
);

hoverMap.set('slen', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>slen</span> 

Script length

System variables for debugging purposes`
);

hoverMap.set('slp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>slp</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>time</span>) 

Sleep time in seconds
- pos values => light sleep
- neg values => deep sleep 

(if defined USE_TTGO_WATCH)
`
);

hoverMap.set('sml', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sml</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>n</span>] 

Get value of SML energy register n

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>sml</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>m 0 bd</span>)

Set SML baud rate of Meter m to bd (baud)

---
<span style='color:var(--vscode-symbolIcon-methodForeground);'>sml</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>m 1 htxt</span>) 

Send SML Hex string htxt as binary to Meter m

---
<span style='color:var(--vscode-symbolIcon-methodForeground);'>sml</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>-m 1 initstr</span>)

Reinits serial port of Meter m, initstr: "baud:mode" e.g. "9600:8E1", currently only baud and N,E,O are evaluated.

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>sml</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>m 2</span>)

Reads serial data received by Meter m into string (if m<0 reads hex values, else asci values) 

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>sml</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>m 3 hstr</span>)

Inserts SML Hexstring variable hstr as binary to Meter m in Output stream 

e.g. for special MODBUS cmds, hstr must be a string variable NO string constant

`
);

hoverMap.set('smld', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>smld</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>m</span>) 

Call decoder of meter m
`
);

hoverMap.set('smlj', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>smlj</span> 

Read or write variable, when 0 disables MQTT output of SML.
`
);

hoverMap.set('smls', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>smls</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>m</span>] 

Get value of SML meter string info of meter m

if m < 0 gets string representation of numeric value of decode line m, this enables double number resolution.
`
);

hoverMap.set('smlv', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>smlv</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>n</span>] 

Get SML decode valid status of line n (1..N)

Returns 1 if line decoded

n=0 resets all status codes to zero
`
);

hoverMap.set('smw', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>smw</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ADDR MODE NUMBER</span>)

Send a value with checksum to MODBUS Address  

MODE: 
- 0 = uint16
- 1 = uint32
- 3 = float

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('so', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>so</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>flags</span>)  

*Special html options:*  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>WSO_NOCENTER</span> = 1 force elements not centered  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>WSO_NODIV</span> = 2 force elements not in extra \\\<div>
<span style='color:var(--vscode-symbolIcon-variableForeground);'>WSO_FORCEPLAIN</span> = 4 send line in plain (no table elements)  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>WSO_FORCEMAIN</span> = 8 send lines in main mode 

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>so</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>RXPIN TXPIN BR</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>so</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>RXPIN TXPIN BR MMM</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>so</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>RXPIN TXPIN BR MMM BSIZ</span>) 

Open serial port with:
- RXPIN
- TXPIN 
- BR baud rate
- MMM serial mode e.g 7E2 (all 3 modechars must be specified) 
- BSIZ serial IRW buffer size

Serial IO support requires #define USE_SCRIPT_SERIAL
`
);

hoverMap.set('sp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sp</span> ()

Read a number char code from serial port, don't remove it from serial input (peek)

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('spi', 
`SPI IO support 

Requires #define USE_SCRIPT_SPI

<span style='color:var(--vscode-symbolIcon-methodForeground);'>spi</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>0 SCLK MOSI MISO</span>) 

Defines a software SPI port with pin numbers used for SCLK, MOSI, MISO  

<span style='color:var(--vscode-symbolIcon-methodForeground);'>spi</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>0 -1 freq</span>) 

Defines a hardware SPI port with pin numbers defined by Tasmota GPIO definition with bus frequency in Mhz.

<span style='color:var(--vscode-symbolIcon-methodForeground);'>spi</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>0 -2 freq</span>) 

Defines a hardware SPI port 2 on ESP32 with pin numbers defined by Tasmota GPIO definition

<span style='color:var(--vscode-symbolIcon-methodForeground);'>spi</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>1 N GPIO</span>) 

Sets the CS pin with index N (1..4) to pin Nr GPIO

<span style='color:var(--vscode-symbolIcon-methodForeground);'>spi</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>2 N ARRAY LEN S</span>) 

Sends and receives an ARRAY with LEN values 
With S (1..3) (8,16,24 bits)  
If N==-1 CS is ignored.  
If S==4 CS is raised after each byte.

`
);

hoverMap.set('spin', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>spin</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x b</span>) 

Set GPIO x (0..16) to value b (0,1).  
Only bit 0 of b is used - even values set the GPIO to 0 and uneven values set the GPIO to 1
`
);

hoverMap.set('spinm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>spinm</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x m</span>) 

Set GPIO x (0..16) to mode m 
- 0 = input
- 1 = output
- 2 = input with pullup


Alternatively b may be: 
- O=out
- I=in
- P=in with pullup
`
);

hoverMap.set('sqrt', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sqrt</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>) 

Calculates the sqrt(x) 

If defined USE_ANGLE_FUNC`
);

hoverMap.set('sr', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sr</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>X</span>) 

Read a string from serial port until charcode X, all available chars up to string size or until charcode X

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('sra', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sra</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ARRAY flags</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>sra</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>len ARRAY flags</span>)

Fill an array from serial port.  
If USE_SML_M is enabled and Array size is 8 it is assumed to be a MODBUS request and the checksum is evaluated.  

if OK 8 is returned, else -2, or if flags is set Modbus response is assumed and ckum is calculated, 0 = standard Modbus, 1 = Rec BMA mode, return -2 on checksum error

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('srb', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>srb</span> ()

Read a number char code from serial port

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('st', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>st</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>svar c n</span>)    
<span style='color:var(--vscode-symbolIcon-variableForeground);'>st(svar 'c' n)</span> 

String token - retrieve the nth element of svar delimited by c
`
);

hoverMap.set('stack', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>stack</span> 

Stack size

System variables for debugging purposes`
);

hoverMap.set('sunrise', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sunrise</span>  

Sunrise minutes since midnight
`
);

hoverMap.set('sunset', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sunset</span>  

Sunset minutes since midnight
`
);

hoverMap.set('svars', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>svars</span> 

Save permanent vars
`
);

hoverMap.set('sw', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>sw</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

Switch state (x = 0..N)  
(Switch1 = sw[0])

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>sw</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>STR</span>)  

Write the string STR to serial port

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('swa', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>swa</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ARRAY len flags</span>)

Send len bytes of an array to serial port  
If flags is set Modbus cmd is assumed and cksum is calculated, 0 = standard Modbus, 1 = Rec BMA mode

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('swb copy', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>swb</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>NUM</span>) 

Write the number char code NUM to serial port

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('swb', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>swb</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>NUM</span>) 

Write the number char code NUM to serial port

Serial IO support requires #define USE_SCRIPT_SERIAL`
);

hoverMap.set('switch', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>Switch selector</span> 

\`\`\`
switch var 
  case a  
    <code block>
  case b  
    <code block>
ends  
\`\`\`


*var* can be numeric or string
`
);

hoverMap.set('tbut', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tbut</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>x</span>] 

Touch screen button state (x = 1..N)
`
);

hoverMap.set('then', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>Conditional Statements</span> 

There are two syntax alternatives. You may NOT mix both formats.

\`\`\`
if a==b  
and x==y  
or k==i 
then <do this>
else <do that>  
endif  
\`\`\`

or

\`\`\`
if a==b  
and x==y  
or k==i {  
  <do this> 
} else {  
  <do that>    
}
\`\`\`

Remarks:  
The last closing bracket must be on a separate line.

Calculations are permitted in conditional expressions, e.g.  
\`if var1-var2==var3*var4\`

Conditional expressions may be enclosed in parentheses.  
The statement must be on a single line. e.g.,  
\`if ((a==b) and ((c==d) or (c==e)) and (s!="x"))\``
);

hoverMap.set('time', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>time</span>  

Minutes since midnight
`
);

hoverMap.set('tinit', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tinit</span>  

True on time init

The variable is cleared after reading true`
);

hoverMap.set('tm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tm</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn lbl (xs)</span>)  

Creates a *Time Input control*

<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of number variable to hold time HHMM as number e.g. 1900 means 19:00  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>lbl</span> = label text  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>xs</span> = optional xs (default 200)

`
);

hoverMap.set('topic', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>topic</span>  

MQTT topic
`
);

hoverMap.set('tper', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tper</span>  

TelePeriod  
(May also be set)
`
);

hoverMap.set('ts1', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tsN</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts1</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts2</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts3</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts4</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  

Set up to 4 timers (N=1..4) to millisecond time
 
On expiration triggers section >tiN 

(if defined USE_SCRIPT_TIMER)
`
);

hoverMap.set('ts2', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tsN</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts1</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts2</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts3</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts4</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  

Set up to 4 timers (N=1..4) to millisecond time
 
On expiration triggers section >tiN 

(if defined USE_SCRIPT_TIMER)
`
);

hoverMap.set('ts3', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tsN</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts1</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts2</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts3</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts4</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  

Set up to 4 timers (N=1..4) to millisecond time
 
On expiration triggers section >tiN 

(if defined USE_SCRIPT_TIMER)
`
);

hoverMap.set('ts4', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tsN</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts1</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts2</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts3</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  
<span style='color:var(--vscode-symbolIcon-methodForeground);'>ts4</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>ms</span>)  

Set up to 4 timers (N=1..4) to millisecond time
 
On expiration triggers section >tiN 

(if defined USE_SCRIPT_TIMER)
`
);

hoverMap.set('tset', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tset</span> 

True on time set

The variable is cleared after reading true`
);

hoverMap.set('tsn', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tsn</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>tstamp</span>) 

Convert timestamp to seconds

Requires #define USE_FEXTRACT`
);

hoverMap.set('tso', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tso</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>tstamp day flag</span>) 

Add time offset in days to timestamp optional  

flg = char 0 zo zero time HH:MM:SS

Requires #define USE_FEXTRACT`
);

hoverMap.set('tstamp', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tstamp</span>  

Timestamp  
Local date and time
`
);

hoverMap.set('ttget', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ttget</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>TNUM SEL</span>) 

Get tasmota timer setting from timer TNUM (1 .. 16)

SEL:
- 0 = time
- 1 = time window
- 2 = repeat
- 3 = days
- 4 = device
- 5 = power
- 6 = mode
- 7 = arm`
);

hoverMap.set('tx', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>tx</span>(<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn lbl (xs) (type min max)</span>)  

Creates a *Text Input control*

<span style='color:var(--vscode-symbolIcon-variableForeground);'>vn</span> = name of variable to hold text state  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>lbl</span> = label text  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>xs</span> = optional xs (default 200)  
<span style='color:var(--vscode-symbolIcon-variableForeground);'>type min max</span> = optional strings  

type = e.g "datetime-local" for date+time selector   
min, max = date-time min max range`
);

hoverMap.set('upd', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>upd</span> [<span style='color:var(--vscode-symbolIcon-variableForeground);'>var</span>]

True if a variable was updated

The variable is cleared after reading true`
);

hoverMap.set('upsecs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>upsecs</span>  

Seconds since start
`
);

hoverMap.set('uptime', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>uptime</span>  

Minutes since start
`
);

hoverMap.set('wbut', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wbut</span> 

Button status of watch side button (if defined USE_TTGO_WATCH)
`
);

hoverMap.set('wc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>sel p1 p2</span>) 

Control webcam  
sel = function selector   
p1 ... optional parameters

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (0 <span style='color:var(--vscode-symbolIcon-variableForeground);'>pres</span>) 

Init webcam with picture resolution pres  

Returns: 
- 0 when error 
- 2 when PSRAM found
- 1 otherwise

Pres values:
- 0 = FRAMESIZE_QQVGA, // 160x120
- 1 = FRAMESIZE_QQVGA2, // 128x160
- 2 = FRAMESIZE_QCIF, // 176x144
- 3 = FRAMESIZE_HQVGA, // 240x176
- 4 = FRAMESIZE_QVGA, // 320x240
- 5 = FRAMESIZE_CIF, // 400x296
- 6 = FRAMESIZE_VGA, // 640x480
- 7 = FRAMESIZE_SVGA, // 800x600
- 8 = FRAMESIZE_XGA, // 1024x768
- 9 = FRAMESIZE_SXGA, // 1280x1024
- 10 = FRAMESIZE_UXGA, // 1600x1200

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (1 <span style='color:var(--vscode-symbolIcon-variableForeground);'>bnum</span>)

Capture picture to rambuffer bnum (1..4), returns framesize of picture or 0 when error

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (2 <span style='color:var(--vscode-symbolIcon-variableForeground);'>sel p1</span>) 

Execute various controls

sel =
- 0 fs = set frame size (see above for constants)
- 1 se = set special effect
  - 0 = no effect
  - 1 = negative
  - 2 = black and white
  - 3 = reddish
  - 4 = greenish
  - 5 = blue
  - 6 = retro

- 2 fl = set horizontal flip 0,1
- 3 mi = set vertical mirror 0,1


To read a value without setting pass -1

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (3) 

Gets picture width

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (4) 

Gets picture height

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (5 <span style='color:var(--vscode-symbolIcon-variableForeground);'>p</span>) 

Start stop streaming
- 0 = stop
- 1 = start

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (6 <span style='color:var(--vscode-symbolIcon-variableForeground);'>p</span>) 

Start stop motion detector
- p = 0 => stop detector
- p = T start detector with picture every T ms
- p = -1 get picture difference
- p = -2 get picture brightness

---

<span style='color:var(--vscode-symbolIcon-methodForeground);'>wc</span> (7 <span style='color:var(--vscode-symbolIcon-variableForeground);'>p</span>) 

Start stop face detector
- p = 0 => stop detector
- p = T start detector with picture every T ms
- p = -1 get number of faces found in picture
`
);

hoverMap.set('wcf', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wcf</span> 

Flushes the web buffer (WSContentFlush)
`
);

hoverMap.set('wcs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wcs</span> 

Send this line to webpage (WebContentSend)
`
);

hoverMap.set('wday', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wday</span> 

day of week 

- Sunday = 1
- Monday = 2
- Tuesday = 3
- Wednesday = 4
- Thursday = 5
- Friday = 6
- Saturday = 7
`
);

hoverMap.set('wdclk', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wdclk</span> 

Double tapped on display (if defined USE_TTGO_WATCH)
`
);

hoverMap.set('wfs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wfs</span> 

Send this file to webpage
`
);

hoverMap.set('wific', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wific</span>  

True on Wi-Fi connect

The variable is cleared after reading true`
);

hoverMap.set('wifid', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wifid</span>  

True on Wi-Fi disconnect

The variable is cleared after reading true`
);

hoverMap.set('wifis', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wifis</span> 

Wi-Fi connection status: 
- 0 = disconnected
- &gt;0 = connected
`
);

hoverMap.set('wm', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wm</span> 

Contains source of web request code 

e.g. 0 = Sensor display (FUNC_WEB_SENSOR)
`
);

hoverMap.set('ws2812', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>ws2812</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>array dstoffset</span>) 

Copies an array (defined with m:vname) to the WS2812 LED chain. 

The array length should be defined as long as the number of pixels. 

Color is coded as 24 bit RGB. optionally the destination offset in the LED chain may be given.   
if dstoffset is flagged by 0x1000, 2 values 16 bits each in an array are used for 32 bit RGBW pixels
`
);

hoverMap.set('wsa', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wsa</span> () 

Return bytes available on tcp stream

TCP server support requires #define USE_SCRIPT_TCP_SERVER`
);

hoverMap.set('wsc', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wsc</span> () 

Close tcp stream server

TCP server support requires #define USE_SCRIPT_TCP_SERVER`
);

hoverMap.set('wso', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wso</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>port</span>) 

Start a tcp stream server at port

TCP server support requires #define USE_SCRIPT_TCP_SERVER`
);

hoverMap.set('wsra', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wsra</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>array</span>) 

Reads a tcp stream into array

TCP server support requires #define USE_SCRIPT_TCP_SERVER`
);

hoverMap.set('wsrs', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wsrs</span> () 

Return a string read from tcp stream

TCP server support requires #define USE_SCRIPT_TCP_SERVER`
);

hoverMap.set('wswa', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wswa</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>array num (type)</span>) 

Writes num bytes of array to tcp stream.

Type: 
- 0 = uint8 (default)
- 1 = uint16
- 2 = sint16
- 3 = float

TCP server support requires #define USE_SCRIPT_TCP_SERVER`
);

hoverMap.set('wsws', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wsws</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>string</span>) 

Writes a string to tcp stream

TCP server support requires #define USE_SCRIPT_TCP_SERVER`
);

hoverMap.set('wtch', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>wtch</span> (<span style='color:var(--vscode-symbolIcon-variableForeground);'>sel</span>) 

Gets state from touch panel 
- sel=0 => touched
- sel=1 => x position
- sel=2 => y position 

(if defined USE_TTGO_WATCH)
`
);

hoverMap.set('year', 
`<span style='color:var(--vscode-symbolIcon-methodForeground);'>year</span> 

year
`
);


module.exports = { hoverMap };
